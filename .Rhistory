source("/Users/henno/cracker/pkg/R/hz.script.R")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94382871a95c")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94382871a95c")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
if(!exists(".design")){#
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")#
))#
	}#
	.report <- list()
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")
)
)
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")
))
gui.input
gui.input$exp.design,
gui.input$exp.design
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/parameters.Rdata")
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")
))
!exists(".design")
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")
))
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
.design
gui.input$exp.design
dim(.data)
dim(.data2)
str(.data2)
gui.input <- .data2$gui.input
gui.input$exp.design
.design
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
.design
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
.design
.design
.design
.design
.design
.design
.design
.design
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
source("/Users/henno/cracker/pkg/R/hz.row.plot.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
try(	save(.data2,.data,gui.input, hz.exp.des.parse.data2,.col,y.lab.input,.design,prog.max, ratio.prog,pb,ui, plot.loop,path.data, foldername, colorblind.set,color.blind,file = paste(path.data,foldername,"Rdata/script.plot.main.Rdata",sep = "/"))
)
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/cracker/pkg/R/hz.script.plot.main.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
load("/Users/cRacker-DEMO/dbug/ms-analysis-N15-raw-IonIntensity-2013-08-09/Rdata/script.plot.main.Rdata")
if(!exists(".design")){#
try.error <- class(try(	.design  <- read.table(gui.input$exp.design,header = TRUE,sep = "\t")#
))#
	}#
	.report <- list()
plot.loop
plot.type
plot.type <- 1
if(plot.type == 1){#
		dir.create(.setpath<- paste(paste(path.data,foldername,sep = "/"),"/plot-all","-",gui.input$expname,sep = ""))#
		setwd(paste(.setpath,sep = "/"))	#
	}
if(plot.type ==1){#
	error.try <- class(.error<- try(hz.cracker.anova.return <-  hz.script.anova(.data2,gui.input, plot.type,as.numeric(prog.max),pb,ui)))#
	try(	save(hz.cracker.anova.return,file = paste(path.data,foldername,"Rdata/Anova.ttest.Rdata",sep = "/")))#
#
	}
gui.input$n15.log2
error.try <- class(.error <- try(hz.script.row.plot.space <- hz.script.row.plot(.data2,gui.input,y.lab.input, hz.cracker.anova.return$.aov.new,hz.exp.des.parse.data2,colorblind.set,.col,prog.max,ratio.prog,pb,ui)))
try(	save(.data2,gui.input,y.lab.input,.aov.new, hz.exp.des.parse.data2,colorblind.set,.col,prog.max,ratio.prog,pb,ui,inf.info,file = paste(gui.input$path.data,"row.plot.Rdata",sep = "/"))
)
.aov.new <- hz.cracker.anova.return$.aov.new
try(	save(.data2,gui.input,y.lab.input,.aov.new, hz.exp.des.parse.data2,colorblind.set,.col,prog.max,ratio.prog,pb,ui,inf.info,file = paste(gui.input$path.data,"row.plot.Rdata",sep = "/"))
)
inf.info = NULL
if(is.vector(.data2$x.sd)){#
	if(!exists("ratio.prog")){ratio.prog <- 1000}#
	.data2$x.sd <- t(as.matrix(.data2$x.sd))#
}
if(is.vector(.data2$prot.n)){#
	.data2$prot.n <- t(as.matrix(.data2$prot.n))#
}#
#
ratio.prog <- prog.max/8#
#
row.plot.data 	<- .data2$x[order(as.character(rownames(.data2$x))),]#
show.sd.data	<- .data2$x.sd[order(as.character(rownames(.data2$x.sd))),]#
prot.n			<- .data2$prot.n[order(as.character(rownames(.data2$prot.n))),]#
if(length(prot.n) == 0){#
	prot.n <- matrix(0,ncol = dim(.data2$x)[2],nrow = dim(.data2$x)[1])#
}
if(length(show.sd.data) == 0){#
	show.sd.data <- matrix(0,ncol = dim(.data2$x)[2],nrow = dim(.data2$x)[1])#
}#
#
rows.n			<- rownames(prot.n)#
rows.sd			<- rownames(show.sd.data)#
#
show.sd.data 	<- apply(show.sd.data,2,as.numeric)#
prot.n 			<- apply(prot.n,2,as.numeric)#
#
rownames(prot.n) <- rows.n#
rownames(show.sd.data) <- rows.sd
if(!is.vector(sub.info)){#
	print("ordering info")#
try(	order.info 	<- hz.merge.control(gsub(" ","",.data2$proteinlist.info[,2]),gsub(" ","",rownames(row.plot.data))))#
#
try(	sub.info 	<- .data2$proteinlist.info[order.info,1:3])#
if(!exists("sub.info")){sub.info <- c()}#
## correct n if samples are averaged#
if(all(gui.input$calc.empai, gui.input$empai.sd) | all(!gui.input$calc.empai, !as.logical(gui.input$raw)) ){#
	if(dim(prot.n)[2]!= dim(show.sd.data)[2]){#
		rows <- rownames(prot.n)#
		prot.n.comb <- c()#
		colnames(prot.n)  	<- tolower(gsub("SD ","",colnames(prot.n)))#
		colnames(prot.n)  	<- tolower(gsub(" ","",colnames(prot.n)))#
		for(i in 1:dim(show.sd.data)[2]){#
			temp.templ 	 	<- colnames(show.sd.data)[i]#
			temp.templ  	<- tolower(gsub("SD ","",temp.templ))#
			temp.templ  	<- tolower(gsub(" ","",temp.templ))#
			temp.cols		<- .data2$exp.design[.data2$exp.design[,2] == temp.templ,1]#
			temp.m <- c()#
			for(find.vec in temp.cols){#
				temp.m <- c(temp.m,c(1:(dim(prot.n)[2]))[find.vec == colnames(prot.n)])#
			}#
			temp.sum <- apply(prot.n[,temp.m],1,function(x){sum(x,na.rm = TRUE)})#
			prot.n.comb  <- cbind(prot.n.comb,temp.sum)#
		}#
		prot.n <- prot.n.comb#
		rownames(prot.n) <- rows#
		if(gui.input$calc.empai){#
			test <- merge(.data2$x,prot.n,by = 0)#
		}	#
#
	}#
}#
#
###
use.se <- T#
if(length(show.sd.data) != 0){#
	if(!all(prot.n == 0)& use.se ){#
protein.plot.se <- TRUE#
show.sd.data 	<- show.sd.data/(prot.n^(0.5))#
sd.error		<- show.sd.data#
#
}else{"warning! Used sd instead of sr for error bars."; protein.plot.se <- FALSE}#
show.sd.data[is.infinite(show.sd.data)] <- 0#
show.sd.data[is.na(show.sd.data)] <- 0#
}else{show.sd.data <- matrix(0,dim(row.plot.data))}#
#
if(is.matrix(.aov.new)& length(.aov.new) >0){#
.aov.data		<- as.numeric(as.character(.aov.new[hz.merge.control(gsub(" ","",.aov.new[,1]),gsub(" ","",rownames(row.plot.data))),2]))#
}else{#
	.aov.data <- NA#
}#
if(is.null(sub.info)|!is.matrix(sub.info)){#
	sub.info<- rep("",dim(row.plot.data)[1])#
}else{sub.info <- sub.info[,3]}#
#
if(!exists(".design")){	.design <- NULL}#
if(length(unique(.design$Time)) < 2 & gui.input$exp.design != ""){#
	#gui.input$barpl <- FALSE#
	#tkmessageBox(message = "Time column in ED contains only one entry. Time groups switched off!",icon = "warning")#
	gui.input$time.grouped <- FALSE#
}#
#
if(dim(.data2$x)[2] == 2 & all(gui.input$time.grouped,gui.input$barpl)){#
	gui.input$time.grouped <- FALSE#
}#
if(gui.input$exp.design== ""){#
	gui.input$time.grouped <- FALSE#
}#
#
if(!gui.input$time.grouped){#
gui.input$lineplot.beside  <- FALSE#
}#
.col <- hz.exp.des.parse.data2[,1]#
print("started plotting")#
#stop()
row.plot.data
source("/Users/henno/mqqc/pkg/temp/bla.R")
bla(	x = NA,#
	path 			= NA,#
	name 			= NA,#
	y.axis 			= NA,#
	plot.type 		= "b",#
	plot.col		= 1,#
	barpl			= TRUE,#
	sample.names 	= NA,#
	sub 			= NA,#
	h.abline 		= NA,#
	v.abline 		= NA,#
	x.ylab			= "intensity",#
	x.xlab			= "samples",#
	ui 				= NULL,#
	show.sd			= NULL,# matrix containing the correpondend sd#
	sd.rel  		= FALSE,#
	.descr			= NULL, # if sd is relativ sd!#
	.aov			= NULL,#
	.ttest			= NULL,#
	p.v				= 0.01,#
	sub.cex 		= 0.5,#
	inf.m			= NA,#
	graphic.type 	= "pdf",#
	.design			= NULL,#
	time.groups		= T,#
	group.barplot 	= FALSE,#
	lineplot.beside = F,#
	gui.input,#
	prog.max,#
	ratio.prog,#
	pb,#
	hz.exp.des.parse.data2,#
	colorblind.set,#
	.col,#
	inf.info = NULL)
bla(	x = NA,#
	path 			= NA,#
	name 			= NA,#
	y.axis 			= NA,#
	plot.type 		= "b",#
	plot.col		= 1,#
	barpl			= TRUE,#
	sample.names 	= NA,#
	sub 			= NA,#
	h.abline 		= NA,#
	v.abline 		= NA,#
	x.ylab			= "intensity",#
	x.xlab			= "samples",#
	ui 				= NULL,#
	show.sd			= NULL,# matrix containing the correpondend sd#
	sd.rel  		= FALSE,#
	.descr			= NULL, # if sd is relativ sd!#
	.aov			= NULL,#
	.ttest			= NULL,#
	p.v				= 0.01,#
	sub.cex 		= 0.5,#
	inf.m			= NA,#
	graphic.type 	= "pdf",#
	.design			= NULL,#
	time.groups		= T,#
	group.barplot 	= FALSE,#
	lineplot.beside = F)
inf.info = NULL
bla(	x = row.plot.data,#
					show.sd = show.sd.data,#
					sd.rel = TRUE,#
					.aov = .aov.data #
					,p.v = gui.input$p.value,ui = ui#
					,sub =sub.info ,#
					x.ylab = y.lab.input,#
					plot.col =.col,	#
					inf.m = prot.n,#
					graphic.type = gui.input$graphic.type,#
					plot.type = "b",#
					barpl = gui.input$barpl,#
					time.groups = gui.input$time.grouped,#
					group.barplot = F,#
					x.xlab = gui.input$x.xlab,#
					.design = .design,#
					lineplot.beside = gui.input$lineplot.beside,#
					gui.input = gui.input,prog.max=prog.max,ratio.prog= ratio.prog,pb=pb,hz.exp.des.parse.data2=hz.exp.des.parse.data2,colorblind.set=colorblind.set,.col=.col,inf.info =inf.info)
if(!is.null(show.sd)){#
		show.sd[is.na(show.sd)] <- 0#
	}#
						plot.col.start		 <-.col # plot.col
if(!exists("prog.max")){prog.max <- 10000}#
sd.po <- 0#
	.aov.cor <- p.adjust(.aov,gui.input$p.adjust.method)#
	p.v <- as.numeric(p.v)#
	tempmean <- x#
	total = dim(tempmean)[1]#
	if(is.null(ui)== FALSE){#
	#ui$setProgressBar(pb, 0, label=paste( "0",  "% done"))#
	}#
#
	if(is.na(sample.names)) {#
		col.x <- colnames(tempmean)#
	} else { #
		col.x <- sample.names#
	}#
	row.x <- rownames(tempmean)#
	x <- apply(x,2,as.numeric)#
	temp.x.m <- list(names = c(col.x))#
	# #
	if(is.na(path) == FALSE) {#
		#wd <- getwd();setwd(path)#
	}#
	if(is.na(name)) {#
		pdf.name <- paste("single-protein-plot-",Sys.Date(),".",graphic.type,sep = "")#
	}else{#
		pdf.name <- name#
		}#
	if(max(nchar(col.x)) > 40){#
		col.x <- substr(test,nchar(test)-40,nchar(test))#
		col.x <- paste("...",col.x)#
	}	#
	if(max(nchar(col.x)) > 4){#
	oma.val <- 0.1+(max(nchar(col.x)-4))*0.45#
	}else{#
	oma.val <- 0.1#
	}#
	if(time.groups== T & barpl == F & group.barplot == F){oma.val<- 1}#
	if(max(nchar(col.x)) > 4){#
	height <- 5+(max(nchar(col.x)-4))*0.1#
	}else{#
	height <- 5#
	}#
#
init.width <- 8#
if(dim(as.matrix(x))[2] > 30){#
	width <- init.width + (dim(as.matrix(x))[2]-30)*0.13#
}else{width = init.width}#
#
if(lineplot.beside){#
	width <- width+0.8* length(unique(.design$Group))#
}
if(graphic.type == "pdf"){#
	pdf(pdf.name,pointsize = 13,width = width,height = height)#
	try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1.2,0.5,0)))#
#
}else{#
	dir.create(.wd.set <- pdf.name)#
}
i <- 1
if(!is.null(ui)){#
##############	GUI#
	ratio.prog2 <- (prog.max/8)/total#
#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
#
while(pb.check == "try-error1"){#
		print("Warning: User closed window!")#
#
		try(pb 			<- ui$progressBar(title = "cRacker", min = 0,max = prog.max, width = 300))#
		pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% done"))))#
}#
##############	#
}
if(length(dim(tempmean)[1]) > 1000) {#
			limit = 1000#
		} else {#
			limit = 100#
		}#
		if(i%%limit==0) {#
			cat(paste("Went through",i,"proteins out of",dim(tempmean)[1]),"\n")#
		}#
		temp.y <- as.numeric(tempmean[i,])#
#
		if(is.na(y.axis)) {#
			temp.x <- c(1:dim(tempmean)[2])#
		}#
		if(unique(is.na(temp.y)) == TRUE &length(unique(is.na(temp.y))) == 1) {#
			temp.y[is.na(temp.y)] <- 0#
		}#
		if(is.na(sub) == FALSE) {#
			sub.x = sub[i]#
		} else {#
			sub.x = NA#
		}#
		range.y 	<- range(temp.y[!is.infinite(temp.y)],na.rm = TRUE)#
		if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
		range.y[1] 	<- min(temp.y,na.rm = TRUE)
if(length(show.sd) != 0){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			library(gplots)#
			sd.po <- 0#
			sd.po <- as.numeric(show.sd[i,])#
			if(sd.rel == TRUE){#
				if(range(as.numeric(sd.rel))[2] <= 50){#
				sd.po <- as.numeric(temp.y) * as.numeric(sd.po)}else{#
					sd.po <- as.numeric(temp.y) * as.numeric(sd.po) / 100#
					}#
				}#
				sd.po[is.na(sd.po)]  <- 0#
				range.y <- range(as.numeric(temp.y[!is.infinite(temp.y)])+as.numeric(sd.po),na.rm = TRUE)#
				if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
				range.y[1] <- min(temp.y,na.rm = TRUE)	#
				}#
				range.y[2] <-  range.y[2]*1.03#
		}
if(is.null(.aov) == FALSE){#
			if(is.na(as.numeric(.aov[i]))){.aov[i] <- 1; .aov.cor[i] <- 1}#
			if(as.numeric(.aov.cor[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*")#
			}#
			if(as.numeric(.aov[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*",sep = "")#
			}#
		}#
#
		if(is.null(.ttest) == FALSE){#
				if(is.na(sample.names)) {#
					col.x <- colnames(tempmean)#
				} else { #
					col.x <- sample.names#
		}#
#
				p.v <- 0.01#
				.ttest.i	<- as.numeric(.ttest[i,])#
				.ttest.i.star	<- .ttest.i#
				.ttest.i.star[.ttest.i <= p.v] <- "**"#
				.ttest.i.star[.ttest.i <= 0.05 & .ttest.i > p.v ] <- " *"#
				.ttest.i.star[.ttest.i > 0.05]  <- "  "#
				.ttest.i.star[is.na(.ttest.i)]  <- "  "#
				col.x 		<- paste(col.x,.ttest.i.star)#
		}
!is.null(.design) & time.groups
barpl == FALSE
if(length(.descr) != 0){#
		mtext(.descr[i],3,adj = 0)#
		}
if(is.matrix(inf.m)){#
			l.pos <- rep(3,length(temp.x))#
			l.pos[is.infinite(as.numeric(inf.m[i,])) & as.numeric(inf.m[i,] ) < 0 ] <- 1#
#
			if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.m[i,]}#
			if(exists("temp.min")){			text(temp.x,y = temp.min,labels=n.input,col = "white",pos = l.pos,cex = 0.8)#
}else{#
}#
		}
if(exists("inf.info")){#
			if(is.matrix(inf.info)){#
				l.pos <- rep(3,length(temp.x))#
				l.pos[is.infinite(as.numeric(inf.info[i,])) & as.numeric(inf.info[i,] ) < 0 ] <- 1#
				if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.info[i,]}#
				if(exists("temp.min")){		#
					text(temp.x,y = temp.min,labels=n.input,col = "black",pos = l.pos,cex = 1)#
				}else{#
				}#
			}#
		}
length(show.sd) != 0& barpl == FALSE
if(length(show.sd) != 0& barpl == FALSE){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			#plotCI(temp.x,as.numeric(temp.y),ui =temp.y+sd.po,li = temp.y-sd.po,type = "n",add = TRUE,col = "darkgrey", gap = 0.3,lwd = 2.5)#
			if(!lineplot.beside){#
						plotCI(temp.x,as.numeric(temp.y),ui =as.numeric(temp.y)+as.numeric(sd.po),li =as.numeric(temp.y)-as.numeric(sd.po)#
						,type = "p",add = TRUE,col = plot.col, gap = 0,lwd = 3)#
			if(gui.input$time.grouped){#
					legend("topright", temp.legend.input[,1],fill = temp.legend.input[,2],border = "transparent", bg = "#FFFFFF99",cex = 0.8,xpd = T)#
			#stop()#
			}#
			}#
			}}
if(is.na(sub) == FALSE&!lineplot.beside) {#
			mtext(paste(substring(sub.x,0,125),"..."),adj = 0,cex = sub.cex)#
		}#
		if(is.null(ui)== FALSE){#
		}#
#
		if(is.na(h.abline[1]) == FALSE) {#
			abline(h= h.abline)#
		}#
		if(is.na(v.abline[1]) == FALSE) {#
			abline(v= v.abline)#
		}
graphics.off()
temp.y
temp.min
tempmean
tempmean[i,]
i
rownames(tempmean)[1]
if(!is.null(show.sd)){#
		show.sd[is.na(show.sd)] <- 0#
	}#
						plot.col.start		 <-.col # plot.col#
	if(!exists("prog.max")){prog.max <- 10000}#
sd.po <- 0#
	.aov.cor <- p.adjust(.aov,gui.input$p.adjust.method)#
	p.v <- as.numeric(p.v)#
	tempmean <- x#
	total = dim(tempmean)[1]#
	if(is.null(ui)== FALSE){#
	#ui$setProgressBar(pb, 0, label=paste( "0",  "% done"))#
	}#
#
	if(is.na(sample.names)) {#
		col.x <- colnames(tempmean)#
	} else { #
		col.x <- sample.names#
	}#
	row.x <- rownames(tempmean)#
	x <- apply(x,2,as.numeric)#
	temp.x.m <- list(names = c(col.x))#
	# #
	if(is.na(path) == FALSE) {#
		#wd <- getwd();setwd(path)#
	}#
	if(is.na(name)) {#
		pdf.name <- paste("single-protein-plot-",Sys.Date(),".",graphic.type,sep = "")#
	}else{#
		pdf.name <- name#
		}#
	if(max(nchar(col.x)) > 40){#
		col.x <- substr(test,nchar(test)-40,nchar(test))#
		col.x <- paste("...",col.x)#
	}	#
	if(max(nchar(col.x)) > 4){#
	oma.val <- 0.1+(max(nchar(col.x)-4))*0.45#
	}else{#
	oma.val <- 0.1#
	}#
	if(time.groups== T & barpl == F & group.barplot == F){oma.val<- 1}#
	if(max(nchar(col.x)) > 4){#
	height <- 5+(max(nchar(col.x)-4))*0.1#
	}else{#
	height <- 5#
	}#
#
init.width <- 8#
if(dim(as.matrix(x))[2] > 30){#
	width <- init.width + (dim(as.matrix(x))[2]-30)*0.13#
}else{width = init.width}#
#
if(lineplot.beside){#
	width <- width+0.8* length(unique(.design$Group))#
}#
#
if(graphic.type == "pdf"){#
	pdf(pdf.name,pointsize = 13,width = width,height = height)#
	try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1.2,0.5,0)))#
#
}else{#
	dir.create(.wd.set <- pdf.name)#
}#
	for(i in 1:dim(tempmean)[1]#
	) {#
#
if(!is.null(ui)){#
##############	GUI#
	ratio.prog2 <- (prog.max/8)/total#
#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
#
while(pb.check == "try-error1"){#
		print("Warning: User closed window!")#
#
		try(pb 			<- ui$progressBar(title = "cRacker", min = 0,max = prog.max, width = 300))#
		pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% done"))))#
}#
##############	#
}#
		if(graphic.type == "eps"){#
	postscript(paste(".",.wd.set, paste(row.x[i],".eps",sep = ""),sep = "/"), paper = "special",onefile = FALSE,horizontal = FALSE,pointsize = 13,width = width,height = height)#
	try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1.2,0.5,0)))#
#
		}#
		if(length(dim(tempmean)[1]) > 1000) {#
			limit = 1000#
		} else {#
			limit = 100#
		}#
		if(i%%limit==0) {#
			cat(paste("Went through",i,"proteins out of",dim(tempmean)[1]),"\n")#
		}#
		temp.y <- as.numeric(tempmean[i,])#
#
		if(is.na(y.axis)) {#
			temp.x <- c(1:dim(tempmean)[2])#
		}#
		if(unique(is.na(temp.y)) == TRUE &length(unique(is.na(temp.y))) == 1) {#
			temp.y[is.na(temp.y)] <- 0#
		}#
		if(is.na(sub) == FALSE) {#
			sub.x = sub[i]#
		} else {#
			sub.x = NA#
		}#
		range.y 	<- range(temp.y[!is.infinite(temp.y)],na.rm = TRUE)#
		if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
		range.y[1] 	<- min(temp.y,na.rm = TRUE)#
		if(length(show.sd) != 0){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			library(gplots)#
			sd.po <- 0#
			sd.po <- as.numeric(show.sd[i,])#
			if(sd.rel == TRUE){#
				if(range(as.numeric(sd.rel))[2] <= 50){#
				sd.po <- as.numeric(temp.y) * as.numeric(sd.po)}else{#
					sd.po <- as.numeric(temp.y) * as.numeric(sd.po) / 100#
					}#
				}#
				sd.po[is.na(sd.po)]  <- 0#
				range.y <- range(as.numeric(temp.y[!is.infinite(temp.y)])+as.numeric(sd.po),na.rm = TRUE)#
				if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
				range.y[1] <- min(temp.y,na.rm = TRUE)	#
				}#
				range.y[2] <-  range.y[2]*1.03#
		}#
#
		if(is.null(.aov) == FALSE){#
			if(is.na(as.numeric(.aov[i]))){.aov[i] <- 1; .aov.cor[i] <- 1}#
			if(as.numeric(.aov.cor[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*")#
			}#
			if(as.numeric(.aov[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*",sep = "")#
			}#
		}#
#
		if(is.null(.ttest) == FALSE){#
				if(is.na(sample.names)) {#
					col.x <- colnames(tempmean)#
				} else { #
					col.x <- sample.names#
		}#
#
				p.v <- 0.01#
				.ttest.i	<- as.numeric(.ttest[i,])#
				.ttest.i.star	<- .ttest.i#
				.ttest.i.star[.ttest.i <= p.v] <- "**"#
				.ttest.i.star[.ttest.i <= 0.05 & .ttest.i > p.v ] <- " *"#
				.ttest.i.star[.ttest.i > 0.05]  <- "  "#
				.ttest.i.star[is.na(.ttest.i)]  <- "  "#
				col.x 		<- paste(col.x,.ttest.i.star)#
		}#
		######
 		plot.timeline <- TRUE#
#
		if(!is.null(.design) & time.groups){#
				.design.plot <-(.design[,c(5,3,7)])				#
				if(!as.logical(gui.input$raw)|all(as.logical(gui.input$raw),gui.input$calc.empai,gui.input$empai.sd)){		#
					.design.plot <- unique(.design[,c(2,3,7)])				#
#
					for(test.design in unique(.design.plot$Group)){#
					 	if(length(unique(.design.plot$Experiment[.design.plot$Group == test.design])) != length(.design.plot$Time[.design.plot$Group == test.design])){#
					 		plot.timeline <- FALSE#
					 	}else{plot.timeline <- TRUE}#
					}				#
				}	#
				#plot.timeline <- FALSE#
				temp.x.m <- list()#
				col.vec <- list()#
				col.legend <- c()#
				temp.x.all <- c()#
					.design.plot.backup	<- .design.plot#
					plot.col 			<-	plot.col.start#
					plot.col.backup		<- plot.col#
#
				.names <- c()#
				for(set.time.groups in unique(.design.plot$Group)){#
#
					if(set.time.groups ==1){#
						.design.plot.backup	<- .design.plot#
					}else{#
						.design.plot		<- .design.plot.backup#
					}#
#
					.design.plot.order <- hz.merge.control(.design.plot[,1],gsub(" ","",col.x))		#
					.design.plot 		<- .design.plot[.design.plot.order[!is.na(.design.plot.order)],]#
#
.design.plot.order <- hz.merge.control(gsub(" ","",colnames(x)),.design.plot[,1])#
					plot.col			<- plot.col.backup[.design.plot.order[!is.na(.design.plot.order)]]#
					#print(plot.col)#
#
					 if(!exists("sd.po")){#
					 	sd.po <- rep(0, length(temp.y))#
					 }#
#if(i == 2){stop()}#
					 temp.time.x <- cbind(#
					 	.design.plot$Time[.design.plot$Group == set.time.groups],#
					 	temp.y[.design.plot$Group == set.time.groups],	#
					 	sd.po[.design.plot$Group == set.time.groups],#
					 	inf.m[i,] [.design.plot$Group == set.time.groups],		#
					 	col.x[.design.plot$Group == set.time.groups]				 						)#
			 			.names <- c(.names,set.time.groups)	#
					sd.po <- as.numeric(sd.po) #
					temp.x.all <- c(temp.x.all,#
					 	.design.plot$Time[.design.plot$Group == set.time.groups]					 	)#
					 colnames(temp.time.x) <- c("group","intensity","sd","n","name")#
#
					temp.x.m[[set.time.groups]] <- temp.time.x#
					col.vec[[set.time.groups]]	<- plot.col[.design.plot$Group == set.time.groups]	#
					col.legend <- c(col.legend,plot.col[.design.plot$Group == set.time.groups][1])	#
				}#
#
				names(temp.x.m) <- .names#
								if(!is.numeric(.design.plot$Time)){plot.timeline <- FALSE;group.barplot <- TRUE}#
#
			}#
		######
		if(barpl == FALSE){#
			if(plot.timeline & time.groups ){#
				plot.data.all <- c()#
temp.lim.fun <- function(x){temp.lim <- c()#
for(k.t in 1:length(names(x))){#
	temp.k.t <- x[[k.t]]#
	temp.lim <- c(temp.lim, as.numeric(temp.k.t[,2])+as.numeric(temp.k.t[,3]))#
}#
return(temp.lim)#
}#
error.try <- class(try(temp.lim <- temp.lim.fun(temp.x.m))				#
)#
for(plot.matrix in hz.merge.control(names(temp.x.m),as.character(unique(.design.plot$Group)))#
){#
					plot.data <- temp.x.m[[plot.matrix]][,1:3]#
					assign("temp.x.m",temp.x.m,envir = .GlobalEnv)#
					if(is.vector(plot.data)){#
						plot.data <- t(as.matrix(plot.data))#
#
					}#
					plot.data <- apply(plot.data,2,as.numeric)#
					#plot.data[,2] <- plot.data[,2]-min(plot.data[,2],na.rm = TRUE) 				#
					plot.data[is.na(plot.data[,3]),3] <- 0#
					plot.data.all <- c((as.numeric(plot.data[,2])-plot.data[,3]),(as.numeric(plot.data[,2])+as.numeric(plot.data[,3]))*1.05)#
					}#
										assign("plot.data.all",plot.data.all,envir = .GlobalEnv)#
					if(lineplot.beside){#
					#	ylim.range <- range(plot.data.all[!is.infinite(plot.data.all)],na.rm = T)#
						ylim.range <- range(c(temp.y -sd.po,temp.y+sd.po),na.rm = T)#
#
					}else{#
						#ylim.range <- range(as.numeric(c(x[i,]+show.sd[i,],(x[i,]-show.sd[i,])*0.9)),na.rm = T)#
						ylim.range <- range(c(temp.y -sd.po,temp.y+sd.po),na.rm = T)#
					}#
					if(any(is.na(ylim.range[1]),is.infinite(ylim.range[1]))){#
						ylim.range[1] <- 0#
					}#
					if(any(is.na(ylim.range[2]),is.infinite(ylim.range[2]))){#
						ylim.range[2] <- 1#
					}#
			if(lineplot.beside){#
				layout(matrix(c(rep(1,length(unique(.design$Group))+1),2:(length(unique(.design$Group))+2)),2,length(unique(.design$Group))+1, byrow =T), heights = c(0.2,1),widths = c(0.4,rep(1,length(unique(.design$Group)))))#
main.temp <- ""#
				par(mar = c(0,0,0,0),mai = c(0,0,0,0),oma = c(0,0,0,0))#
				plot.new()#
				legend("topleft",legend = c(row.x[i],sub.x),box.col = "transparent",cex = 1.5, xjust = 1)#
								par(mai = c(0.1,0.7,0.1,0))#
plot(#
					0,#
					0,#
					type = "n",#
					main = main.temp,#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					axes = F,#
					lwd = 3,#
					cex = 1.1,#
					mgp = c(0,0,0)#
				)#
			}else{#
#
				main.temp <- row.x[i]#
				try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1,0.5,0)))#
#
				plot(#
					0,#
					0,#
					type = "n",#
					main = main.temp,#
					col = plot.col,#
					xlab = x.xlab,#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					lwd = 3,#
					cex = 1.1#
				)#
				grid()#
				}	#
#
				temp.temp.y <- c()#
				temp.temp.x <- c()#
				temp.temp.sd.po <- c()#
				for(plot.matrix in hz.merge.control(names(temp.x.m),as.character(unique(.design.plot$Group)))){#
				if(lineplot.beside ){#
				par(mai = c(0.6,0.3,0.1,0))#
				plot(#
					0,#
					0,#
					type = "n",#
					#main = row.x[i],#
					col = plot.col,#
					xlab = x.xlab,#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					lwd = 3,#
					cex = 1.1#
				)						#
				grid()#
#
					}#
					if(any(duplicated(temp.x.m[[plot.matrix]][,1]))& i == 1){#
						tkmessageBox(message = "Duplicated values in time column in experimental design file. Settings might not be optimal for visual output!")#
					}#
					plot.data <- temp.x.m[[plot.matrix]][,1:3]#
					#.names <- names(temp.x.m[plot.matrix])#
					if(is.vector(plot.data)){#
						plot.data <- t(as.matrix(plot.data))#
#
					}#
					plot.data <- apply(plot.data,2,as.numeric)#
					points(plot.data[,1:2]	,#
							type = "b",#
							col = col.vec[[plot.matrix]],#
							lwd = 3,#
							cex = 1.1#
					)#
					if(lineplot.beside){#
					plotCI(plot.data[,1],as.numeric(plot.data[,2]),ui =as.numeric(plot.data[,2])+as.numeric(plot.data[,3]),li =as.numeric(plot.data[,2])-as.numeric(plot.data[,3])	,type = "p",add = TRUE,col =col.vec[[plot.matrix]], gap = 0,lwd = 3)#
			legend(	"top", #
					.names[plot.matrix],#
					fill = col.vec[[plot.matrix]],#
					border = "transparent", #
					bg = "#FFFFFF99",cex =1.2,box.col = "transparent")#
					}#
					temp.plot.data <- cbind(plot.data,col.vec[[plot.matrix]])#
					temp.temp.y <- rbind(temp.temp.y, temp.plot.data)#
				}#
				plot.col.backup <- plot.col#
				temp.x 	<- as.numeric(temp.temp.y[,1])#
				temp.y 	<- as.numeric(temp.temp.y[,2])#
				sd.po 	<- as.numeric(temp.temp.y[,3])#
				plot.col <- temp.temp.y[,4]#
			temp.legend.input<- unique(cbind(as.character(.design.plot[,2]), plot.col.backup))#
			#graphics.off()#
		#		stop()#
#
			}else{#
			plot.col<- hz.exp.des.parse.data2[hz.merge.control(hz.exp.des.parse.data2[,2],col.x),1]#
			range.y <- range(c(as.numeric(sd.po)+(as.numeric(temp.y[!is.infinite(temp.y)])),as.numeric(as.numeric(temp.y[!is.infinite(temp.y)])) -as.numeric(sd.po)),na.rm = T)#
			if(range.y[1] == range.y[2]){#
				range.y[2] <- range.y[1]+1#
			}#
			plot(	temp.x,#
					temp.y,#
					main = row.x[i],#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = range.y,#
					axes = FALSE,#
					lwd = 3,#
					cex = 1.1,#
					type = "n"#
			)#
			grid()#
			points(temp.x,temp.y,col = "grey",type = "b",lwd = 3,cex = 1.1)#
#
			points(	temp.x,#
					temp.y,#
					#type = plot.type,#
					main = row.x[i],#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = range.y,#
					axes = FALSE,#
					lwd = 3,#
					cex = 1.1#
			)#
					axis(2)#
		axis(1,temp.x,col.x,las = 2)#
#
			}#
		} else {#
			if(length(show.sd) != 0){#
				if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
					plot.ci <- TRUE#
				}else{#
					plot.ci <- FALSE#
					sd.po <- rep(0,length(temp.y))#
				}#
			}else{#
				plot.ci <- FALSE#
				sd.po <- rep(0,length(temp.y))#
			}#
			if(time.groups& any(plot.timeline,group.barplot)){#
				for(time.groups.i in 1: length( names(temp.x.m))){#
					if(time.groups.i == 1){#
						time.groups.temp <- as.numeric(temp.x.m[[time.groups.i]][,c(2)] )#
						time.groups.n	 <- temp.x.m[[time.groups.i]][,c(4)] #
						time.groups.sd	 <- as.numeric(temp.x.m[[time.groups.i]][,c(3)] )#
						time.groups.names<- temp.x.m[[time.groups.i]][,c(5)] #
					}else{#
				#		 				temp.x.m.order <- hz.merge.control(temp.x.m		[[time.		groups.i]][,5],time.groups.temp[,5])#
						temp.x.m.temp.time  <- temp.x.m[[time.groups.i]][,2]#
						time.groups.temp <- cbind(time.groups.temp,temp.x.m.temp.time)		#
						temp.x.m.vec <- temp.x.m[[time.groups.i]][,4]#
		 				time.groups.n <- cbind(time.groups.n, temp.x.m.vec)#
		 				time.groups.sd <- cbind(time.groups.sd,as.numeric(temp.x.m[[time.groups.i]][,3]))#
temp.x.m.temp.name  <- temp.x.m[[time.groups.i]][,5]#
						if(is.vector(time.groups.names)){#
							time.groups.names <- as.matrix(time.groups.names)#
						}#
						substraction.test	<- dim(time.groups.names )[1]-length(temp.x.m.temp.name)						#
						if(substraction.test > 0){#
							temp.x.m.temp.name 			<- c(temp.x.m.temp.name,rep(NA, substraction.test))#
							names(temp.x.m.temp.name)[(length(temp.x.m.temp.name)-substraction.test+1):length(temp.x.m.temp.name)] 	<- 	NA#
						}#
						if(substraction.test < 0){#
							temp.x.m.temp.name 			<- rbind(time.groups.names,matrix(NA, (substraction.test),dim(time.groups.names)[2]))#
							names(temp.x.m.temp.name)[(length(temp.x.m.temp.name)-substraction.test+1):length(temp.x.m.temp.name)] 	<- 	NA#
						}#
						time.groups.names <- cbind(time.groups.names, temp.x.m.temp.name)					#
					}#
				}#
				colnames(time.groups.temp) <- names(temp.x.m)#
				rownames(time.groups.temp) <- NULL#
				time.groups.temp[is.na(time.groups.names)] <- NA#
				colnames(time.groups.sd) <- names(temp.x.m)#
				rownames(time.groups.sd) <- NULL#
				time.groups.sd[is.na(time.groups.names)] <- NA#
#
				colnames(time.groups.n) <- names(temp.x.m)#
				rownames(time.groups.n) <- NULL#
				time.groups.n[is.na(time.groups.names)] <- NA#
#
				colnames(time.groups.n) <- names(temp.x.m)#
				rownames(time.groups.names) <- NULL#
								temp.y 	<- (time.groups.temp)#
				temp.y <- apply(temp.y,2,as.numeric)#
				sd.po 	<- (time.groups.sd) #
				col.x2 <- as.vector((time.groups.names))#
				#hz.merge.control(colnames(x), col.x2)#
				#stop()#
				if(barpl&time.groups){#
					temp.y <- t(temp.y)#
					col.x2 <- t(time.groups.names)#
					sd.po <- t(sd.po)#
					color <- col.x2#
				for(col.grep in 1:length(colnames(tempmean))){#
					temp.col.grep <- grep(colnames(tempmean)[col.grep],color,fixed = T)#
					color[temp.col.grep] <- .col[col.grep]#
				}#
				}#
							plot.col <- color#
				#stop()#
		try(				inf.m.temp <- as.vector(time.groups.n)[!is.na(as.vector(time.groups.n))]#
		)#
		if(length(inf.m.temp)==0){inf.m.temp <- rep(0,dim(inf.m)[2])}#
				inf.m[i,] <- inf.m.temp			#
			}#
if(barpl&!time.groups){#
					col.x2 <- col.x#
				}#
col.temp <- hz.merge.control(hz.exp.des.parse.data2[,2],col.x2)#
plot.col <- hz.exp.des.parse.data2[col.temp,1]#
#
library(gplots)#
			try.error <- class(try(temp.min <- min(temp.y -sd.po,na.rm = T)*0.9))#
			if(try.error == "try-error"){#
			try.error <- class(try(temp.min <- 0))#
#
			}#
			  par(lwd = 2)#
yaxp.v <- c(0,max(as.numeric(tempmean[!is.infinite(tempmean)]),na.rm = TRUE), 4) #
yaxp.v[is.na(yaxp.v)] <- 1#
yaxp.v[is.infinite(yaxp.v)] <- 1#
#print(yaxp.v)#
				test <- barplot2(#
				temp.y-temp.min,#
				main = row.x[i],#
				col = plot.col,#
				names.arg = col.x2,#
				las = 2,#
				ylab = x.ylab,#
				plot.ci = TRUE,#
				ci.l = temp.y+sd.po,#
				ci.u = temp.y-sd.po,#
				ci.color = "black",#
				ci.lwd = 2,#
				lwd = 2,#
				beside = TRUE,#
				xpd=F, #
				yaxp=yaxp.v #
				,#
				ylim = c(temp.min,max(as.numeric(sd.po)+as.numeric(temp.y[!is.infinite(temp.y)]),na.rm = TRUE)), #
				offset = temp.min,#
				mgp = c(3.9,1,0),#
				plot.grid = T,#
				grid.col = "darkgrey"#
			)#
			temp.x <- as.numeric(test)#
		}#
										 			#	stop()#
#
		if(length(.descr) != 0){#
		mtext(.descr[i],3,adj = 0)#
		}#
		if(is.matrix(inf.m)){#
			l.pos <- rep(3,length(temp.x))#
			l.pos[is.infinite(as.numeric(inf.m[i,])) & as.numeric(inf.m[i,] ) < 0 ] <- 1#
#
			if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.m[i,]}#
			if(exists("temp.min")){			text(temp.x,y = temp.min,labels=n.input,col = "white",pos = l.pos,cex = 0.8)#
}else{#
}#
		}#
		if(exists("inf.info")){#
			if(is.matrix(inf.info)){#
				l.pos <- rep(3,length(temp.x))#
				l.pos[is.infinite(as.numeric(inf.info[i,])) & as.numeric(inf.info[i,] ) < 0 ] <- 1#
				if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.info[i,]}#
				if(exists("temp.min")){		#
					text(temp.x,y = temp.min,labels=n.input,col = "black",pos = l.pos,cex = 1)#
				}else{#
				}#
			}#
		}#
		if(length(show.sd) != 0& barpl == FALSE){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			#plotCI(temp.x,as.numeric(temp.y),ui =temp.y+sd.po,li = temp.y-sd.po,type = "n",add = TRUE,col = "darkgrey", gap = 0.3,lwd = 2.5)#
			if(!lineplot.beside){#
						plotCI(temp.x,as.numeric(temp.y),ui =as.numeric(temp.y)+as.numeric(sd.po),li =as.numeric(temp.y)-as.numeric(sd.po)#
						,type = "p",add = TRUE,col = plot.col, gap = 0,lwd = 3)#
			if(gui.input$time.grouped){#
					legend("topright", temp.legend.input[,1],fill = temp.legend.input[,2],border = "transparent", bg = "#FFFFFF99",cex = 0.8,xpd = T)#
			#stop()#
			}#
			}#
			}}#
		if(is.na(sub) == FALSE&!lineplot.beside) {#
			mtext(paste(substring(sub.x,0,125),"..."),adj = 0,cex = sub.cex)#
		}#
		if(is.null(ui)== FALSE){#
		}#
#
		if(is.na(h.abline[1]) == FALSE) {#
			abline(h= h.abline)#
		}#
		if(is.na(v.abline[1]) == FALSE) {#
			abline(v= v.abline)#
		}#
#
	if(graphic.type == "eps"){#
		graphics.off()	#
	}#
#	dev.off()#
#	stop("er")#
	}#
	graphics.off()#
	print(paste("Printed row.plot in ",getwd()))
temp.y
rownames(tempmean)[i]
i
rownames(tempmean)[i-1]
rownames(tempmean)[(i-1)]
rownames(tempmean)
temp.min
temp.y
test <- barplot2(#
				temp.y-temp.min,#
				main = row.x[i],#
				col = plot.col,#
				names.arg = col.x2,#
				las = 2,#
				ylab = x.ylab,#
				plot.ci = TRUE,#
				ci.l = temp.y+sd.po,#
				ci.u = temp.y-sd.po,#
				ci.color = "black",#
				ci.lwd = 2,#
				lwd = 2,#
				beside = TRUE,#
				xpd=F, #
				yaxp=yaxp.v #
				,#
				ylim = c(temp.min,max(as.numeric(sd.po)+as.numeric(temp.y[!is.infinite(temp.y)]),na.rm = TRUE)), #
				offset = temp.min,#
				mgp = c(3.9,1,0),#
				plot.grid = T,#
				grid.col = "darkgrey"#
			)
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438513dc987")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438513dc987")
temp.min
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94382f79e7bc")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94382f79e7bc")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94386c5cfffd")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94386c5cfffd")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94384daa729f")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94384daa729f")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438714b4c8e")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438714b4c8e")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943868f38be")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943868f38be")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943824d6454f")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943824d6454f")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94386f60586d")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94386f60586d")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381e4d953b")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381e4d953b")
?barplot.2
?barplot2
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438e2744dc")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438e2744dc")
temp.y
temp.min
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94383419cec6")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94383419cec6")
temp.min
temp.y
if(!is.null(show.sd)){#
		show.sd[is.na(show.sd)] <- 0#
	}#
						plot.col.start		 <-.col # plot.col#
	if(!exists("prog.max")){prog.max <- 10000}#
sd.po <- 0#
	.aov.cor <- p.adjust(.aov,gui.input$p.adjust.method)#
	p.v <- as.numeric(p.v)#
	tempmean <- x#
	total = dim(tempmean)[1]#
	if(is.null(ui)== FALSE){#
	#ui$setProgressBar(pb, 0, label=paste( "0",  "% done"))#
	}#
#
	if(is.na(sample.names)) {#
		col.x <- colnames(tempmean)#
	} else { #
		col.x <- sample.names#
	}#
	row.x <- rownames(tempmean)#
	x <- apply(x,2,as.numeric)#
	temp.x.m <- list(names = c(col.x))#
	# #
	if(is.na(path) == FALSE) {#
		#wd <- getwd();setwd(path)#
	}#
	if(is.na(name)) {#
		pdf.name <- paste("single-protein-plot-",Sys.Date(),".",graphic.type,sep = "")#
	}else{#
		pdf.name <- name#
		}#
	if(max(nchar(col.x)) > 40){#
		col.x <- substr(test,nchar(test)-40,nchar(test))#
		col.x <- paste("...",col.x)#
	}	#
	if(max(nchar(col.x)) > 4){#
	oma.val <- 0.1+(max(nchar(col.x)-4))*0.45#
	}else{#
	oma.val <- 0.1#
	}#
	if(time.groups== T & barpl == F & group.barplot == F){oma.val<- 1}#
	if(max(nchar(col.x)) > 4){#
	height <- 5+(max(nchar(col.x)-4))*0.1#
	}else{#
	height <- 5#
	}#
#
init.width <- 8#
if(dim(as.matrix(x))[2] > 30){#
	width <- init.width + (dim(as.matrix(x))[2]-30)*0.13#
}else{width = init.width}#
#
if(lineplot.beside){#
	width <- width+0.8* length(unique(.design$Group))#
}#
#
if(graphic.type == "pdf"){#
	pdf(pdf.name,pointsize = 13,width = width,height = height)#
	try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1.2,0.5,0)))#
#
}else{#
	dir.create(.wd.set <- pdf.name)#
}#
	for(i in 1:dim(tempmean)[1]#
	) {#
#
if(!is.null(ui)){#
##############	GUI#
	ratio.prog2 <- (prog.max/8)/total#
#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
	pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% protein barplots"))))#
#
while(pb.check == "try-error1"){#
		print("Warning: User closed window!")#
#
		try(pb 			<- ui$progressBar(title = "cRacker", min = 0,max = prog.max, width = 300))#
		pb.check	<- class(try(ui$setProgressBar(pb, i*ratio.prog2, label=paste(round(i/dim(tempmean)[1]*100),  "% done"))))#
}#
##############	#
}#
		if(graphic.type == "eps"){#
	postscript(paste(".",.wd.set, paste(row.x[i],".eps",sep = ""),sep = "/"), paper = "special",onefile = FALSE,horizontal = FALSE,pointsize = 13,width = width,height = height)#
	try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1.2,0.5,0)))#
#
		}#
		if(length(dim(tempmean)[1]) > 1000) {#
			limit = 1000#
		} else {#
			limit = 100#
		}#
		if(i%%limit==0) {#
			cat(paste("Went through",i,"proteins out of",dim(tempmean)[1]),"\n")#
		}#
		temp.y <- as.numeric(tempmean[i,])#
#
		if(is.na(y.axis)) {#
			temp.x <- c(1:dim(tempmean)[2])#
		}#
		if(unique(is.na(temp.y)) == TRUE &length(unique(is.na(temp.y))) == 1) {#
			temp.y[is.na(temp.y)] <- 0#
		}#
		if(is.na(sub) == FALSE) {#
			sub.x = sub[i]#
		} else {#
			sub.x = NA#
		}#
		range.y 	<- range(temp.y[!is.infinite(temp.y)],na.rm = TRUE)#
		if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
		range.y[1] 	<- min(temp.y,na.rm = TRUE)#
		if(length(show.sd) != 0){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			library(gplots)#
			sd.po <- 0#
			sd.po <- as.numeric(show.sd[i,])#
			if(sd.rel == TRUE){#
				if(range(as.numeric(sd.rel))[2] <= 50){#
				sd.po <- as.numeric(temp.y) * as.numeric(sd.po)}else{#
					sd.po <- as.numeric(temp.y) * as.numeric(sd.po) / 100#
					}#
				}#
				sd.po[is.na(sd.po)]  <- 0#
				range.y <- range(as.numeric(temp.y[!is.infinite(temp.y)])+as.numeric(sd.po),na.rm = TRUE)#
				if(range.y[1] == range.y[2]){#
			range.y[2] <- range.y[1]+1#
		}#
				range.y[1] <- min(temp.y,na.rm = TRUE)	#
				}#
				range.y[2] <-  range.y[2]*1.03#
		}#
#
		if(is.null(.aov) == FALSE){#
			if(is.na(as.numeric(.aov[i]))){.aov[i] <- 1; .aov.cor[i] <- 1}#
			if(as.numeric(.aov.cor[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*")#
			}#
			if(as.numeric(.aov[i]) < as.numeric(p.v)){	#
				row.x[i] <- paste(row.x[i],"*",sep = "")#
			}#
		}#
#
		if(is.null(.ttest) == FALSE){#
				if(is.na(sample.names)) {#
					col.x <- colnames(tempmean)#
				} else { #
					col.x <- sample.names#
		}#
#
				p.v <- 0.01#
				.ttest.i	<- as.numeric(.ttest[i,])#
				.ttest.i.star	<- .ttest.i#
				.ttest.i.star[.ttest.i <= p.v] <- "**"#
				.ttest.i.star[.ttest.i <= 0.05 & .ttest.i > p.v ] <- " *"#
				.ttest.i.star[.ttest.i > 0.05]  <- "  "#
				.ttest.i.star[is.na(.ttest.i)]  <- "  "#
				col.x 		<- paste(col.x,.ttest.i.star)#
		}#
		######
 		plot.timeline <- TRUE#
#
		if(!is.null(.design) & time.groups){#
				.design.plot <-(.design[,c(5,3,7)])				#
				if(!as.logical(gui.input$raw)|all(as.logical(gui.input$raw),gui.input$calc.empai,gui.input$empai.sd)){		#
					.design.plot <- unique(.design[,c(2,3,7)])				#
#
					for(test.design in unique(.design.plot$Group)){#
					 	if(length(unique(.design.plot$Experiment[.design.plot$Group == test.design])) != length(.design.plot$Time[.design.plot$Group == test.design])){#
					 		plot.timeline <- FALSE#
					 	}else{plot.timeline <- TRUE}#
					}				#
				}	#
				#plot.timeline <- FALSE#
				temp.x.m <- list()#
				col.vec <- list()#
				col.legend <- c()#
				temp.x.all <- c()#
					.design.plot.backup	<- .design.plot#
					plot.col 			<-	plot.col.start#
					plot.col.backup		<- plot.col#
#
				.names <- c()#
				for(set.time.groups in unique(.design.plot$Group)){#
#
					if(set.time.groups ==1){#
						.design.plot.backup	<- .design.plot#
					}else{#
						.design.plot		<- .design.plot.backup#
					}#
#
					.design.plot.order <- hz.merge.control(.design.plot[,1],gsub(" ","",col.x))		#
					.design.plot 		<- .design.plot[.design.plot.order[!is.na(.design.plot.order)],]#
#
.design.plot.order <- hz.merge.control(gsub(" ","",colnames(x)),.design.plot[,1])#
					plot.col			<- plot.col.backup[.design.plot.order[!is.na(.design.plot.order)]]#
					#print(plot.col)#
#
					 if(!exists("sd.po")){#
					 	sd.po <- rep(0, length(temp.y))#
					 }#
#if(i == 2){stop()}#
					 temp.time.x <- cbind(#
					 	.design.plot$Time[.design.plot$Group == set.time.groups],#
					 	temp.y[.design.plot$Group == set.time.groups],	#
					 	sd.po[.design.plot$Group == set.time.groups],#
					 	inf.m[i,] [.design.plot$Group == set.time.groups],		#
					 	col.x[.design.plot$Group == set.time.groups]				 						)#
			 			.names <- c(.names,set.time.groups)	#
					sd.po <- as.numeric(sd.po) #
					temp.x.all <- c(temp.x.all,#
					 	.design.plot$Time[.design.plot$Group == set.time.groups]					 	)#
					 colnames(temp.time.x) <- c("group","intensity","sd","n","name")#
#
					temp.x.m[[set.time.groups]] <- temp.time.x#
					col.vec[[set.time.groups]]	<- plot.col[.design.plot$Group == set.time.groups]	#
					col.legend <- c(col.legend,plot.col[.design.plot$Group == set.time.groups][1])	#
				}#
#
				names(temp.x.m) <- .names#
								if(!is.numeric(.design.plot$Time)){plot.timeline <- FALSE;group.barplot <- TRUE}#
#
			}#
		######
		if(barpl == FALSE){#
			if(plot.timeline & time.groups ){#
				plot.data.all <- c()#
temp.lim.fun <- function(x){temp.lim <- c()#
for(k.t in 1:length(names(x))){#
	temp.k.t <- x[[k.t]]#
	temp.lim <- c(temp.lim, as.numeric(temp.k.t[,2])+as.numeric(temp.k.t[,3]))#
}#
return(temp.lim)#
}#
error.try <- class(try(temp.lim <- temp.lim.fun(temp.x.m))				#
)#
for(plot.matrix in hz.merge.control(names(temp.x.m),as.character(unique(.design.plot$Group)))#
){#
					plot.data <- temp.x.m[[plot.matrix]][,1:3]#
					assign("temp.x.m",temp.x.m,envir = .GlobalEnv)#
					if(is.vector(plot.data)){#
						plot.data <- t(as.matrix(plot.data))#
#
					}#
					plot.data <- apply(plot.data,2,as.numeric)#
					#plot.data[,2] <- plot.data[,2]-min(plot.data[,2],na.rm = TRUE) 				#
					plot.data[is.na(plot.data[,3]),3] <- 0#
					plot.data.all <- c((as.numeric(plot.data[,2])-plot.data[,3]),(as.numeric(plot.data[,2])+as.numeric(plot.data[,3]))*1.05)#
					}#
										assign("plot.data.all",plot.data.all,envir = .GlobalEnv)#
					if(lineplot.beside){#
					#	ylim.range <- range(plot.data.all[!is.infinite(plot.data.all)],na.rm = T)#
						ylim.range <- range(c(temp.y -sd.po,temp.y+sd.po),na.rm = T)#
#
					}else{#
						#ylim.range <- range(as.numeric(c(x[i,]+show.sd[i,],(x[i,]-show.sd[i,])*0.9)),na.rm = T)#
						ylim.range <- range(c(temp.y -sd.po,temp.y+sd.po),na.rm = T)#
					}#
					if(any(is.na(ylim.range[1]),is.infinite(ylim.range[1]))){#
						ylim.range[1] <- 0#
					}#
					if(any(is.na(ylim.range[2]),is.infinite(ylim.range[2]))){#
						ylim.range[2] <- 1#
					}#
			if(lineplot.beside){#
				layout(matrix(c(rep(1,length(unique(.design$Group))+1),2:(length(unique(.design$Group))+2)),2,length(unique(.design$Group))+1, byrow =T), heights = c(0.2,1),widths = c(0.4,rep(1,length(unique(.design$Group)))))#
main.temp <- ""#
				par(mar = c(0,0,0,0),mai = c(0,0,0,0),oma = c(0,0,0,0))#
				plot.new()#
				legend("topleft",legend = c(row.x[i],sub.x),box.col = "transparent",cex = 1.5, xjust = 1)#
								par(mai = c(0.1,0.7,0.1,0))#
plot(#
					0,#
					0,#
					type = "n",#
					main = main.temp,#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					axes = F,#
					lwd = 3,#
					cex = 1.1,#
					mgp = c(0,0,0)#
				)#
			}else{#
#
				main.temp <- row.x[i]#
				try(par(oma = c(oma.val,0.1,0.1,0.1),mai = c(1,1,0.5,0)))#
#
				plot(#
					0,#
					0,#
					type = "n",#
					main = main.temp,#
					col = plot.col,#
					xlab = x.xlab,#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					lwd = 3,#
					cex = 1.1#
				)#
				grid()#
				}	#
#
				temp.temp.y <- c()#
				temp.temp.x <- c()#
				temp.temp.sd.po <- c()#
				for(plot.matrix in hz.merge.control(names(temp.x.m),as.character(unique(.design.plot$Group)))){#
				if(lineplot.beside ){#
				par(mai = c(0.6,0.3,0.1,0))#
				plot(#
					0,#
					0,#
					type = "n",#
					#main = row.x[i],#
					col = plot.col,#
					xlab = x.xlab,#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = ylim.range,#
					xlim = 	range(.design.plot$Time,na.rm = T) ,#
					frame = FALSE,#
					lwd = 3,#
					cex = 1.1#
				)						#
				grid()#
#
					}#
					if(any(duplicated(temp.x.m[[plot.matrix]][,1]))& i == 1){#
						tkmessageBox(message = "Duplicated values in time column in experimental design file. Settings might not be optimal for visual output!")#
					}#
					plot.data <- temp.x.m[[plot.matrix]][,1:3]#
					#.names <- names(temp.x.m[plot.matrix])#
					if(is.vector(plot.data)){#
						plot.data <- t(as.matrix(plot.data))#
#
					}#
					plot.data <- apply(plot.data,2,as.numeric)#
					points(plot.data[,1:2]	,#
							type = "b",#
							col = col.vec[[plot.matrix]],#
							lwd = 3,#
							cex = 1.1#
					)#
					if(lineplot.beside){#
					plotCI(plot.data[,1],as.numeric(plot.data[,2]),ui =as.numeric(plot.data[,2])+as.numeric(plot.data[,3]),li =as.numeric(plot.data[,2])-as.numeric(plot.data[,3])	,type = "p",add = TRUE,col =col.vec[[plot.matrix]], gap = 0,lwd = 3)#
			legend(	"top", #
					.names[plot.matrix],#
					fill = col.vec[[plot.matrix]],#
					border = "transparent", #
					bg = "#FFFFFF99",cex =1.2,box.col = "transparent")#
					}#
					temp.plot.data <- cbind(plot.data,col.vec[[plot.matrix]])#
					temp.temp.y <- rbind(temp.temp.y, temp.plot.data)#
				}#
				plot.col.backup <- plot.col#
				temp.x 	<- as.numeric(temp.temp.y[,1])#
				temp.y 	<- as.numeric(temp.temp.y[,2])#
				sd.po 	<- as.numeric(temp.temp.y[,3])#
				plot.col <- temp.temp.y[,4]#
			temp.legend.input<- unique(cbind(as.character(.design.plot[,2]), plot.col.backup))#
			#graphics.off()#
		#		stop()#
#
			}else{#
			plot.col<- hz.exp.des.parse.data2[hz.merge.control(hz.exp.des.parse.data2[,2],col.x),1]#
			range.y <- range(c(as.numeric(sd.po)+(as.numeric(temp.y[!is.infinite(temp.y)])),as.numeric(as.numeric(temp.y[!is.infinite(temp.y)])) -as.numeric(sd.po)),na.rm = T)#
			if(range.y[1] == range.y[2]){#
				range.y[2] <- range.y[1]+1#
			}#
			plot(	temp.x,#
					temp.y,#
					main = row.x[i],#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = range.y,#
					axes = FALSE,#
					lwd = 3,#
					cex = 1.1,#
					type = "n"#
			)#
			grid()#
			points(temp.x,temp.y,col = "grey",type = "b",lwd = 3,cex = 1.1)#
#
			points(	temp.x,#
					temp.y,#
					#type = plot.type,#
					main = row.x[i],#
					col = plot.col,#
					xlab = "",#
					ylab = x.ylab,#
					#names.arg = col.x,#
					ylim = range.y,#
					axes = FALSE,#
					lwd = 3,#
					cex = 1.1#
			)#
					axis(2)#
		axis(1,temp.x,col.x,las = 2)#
#
			}#
		} else {#
			if(length(show.sd) != 0){#
				if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
					plot.ci <- TRUE#
				}else{#
					plot.ci <- FALSE#
					sd.po <- rep(0,length(temp.y))#
				}#
			}else{#
				plot.ci <- FALSE#
				sd.po <- rep(0,length(temp.y))#
			}#
			if(time.groups& any(plot.timeline,group.barplot)){#
				for(time.groups.i in 1: length( names(temp.x.m))){#
					if(time.groups.i == 1){#
						time.groups.temp <- as.numeric(temp.x.m[[time.groups.i]][,c(2)] )#
						time.groups.n	 <- temp.x.m[[time.groups.i]][,c(4)] #
						time.groups.sd	 <- as.numeric(temp.x.m[[time.groups.i]][,c(3)] )#
						time.groups.names<- temp.x.m[[time.groups.i]][,c(5)] #
					}else{#
				#		 				temp.x.m.order <- hz.merge.control(temp.x.m		[[time.		groups.i]][,5],time.groups.temp[,5])#
						temp.x.m.temp.time  <- temp.x.m[[time.groups.i]][,2]#
						time.groups.temp <- cbind(time.groups.temp,temp.x.m.temp.time)		#
						temp.x.m.vec <- temp.x.m[[time.groups.i]][,4]#
		 				time.groups.n <- cbind(time.groups.n, temp.x.m.vec)#
		 				time.groups.sd <- cbind(time.groups.sd,as.numeric(temp.x.m[[time.groups.i]][,3]))#
temp.x.m.temp.name  <- temp.x.m[[time.groups.i]][,5]#
						if(is.vector(time.groups.names)){#
							time.groups.names <- as.matrix(time.groups.names)#
						}#
						substraction.test	<- dim(time.groups.names )[1]-length(temp.x.m.temp.name)						#
						if(substraction.test > 0){#
							temp.x.m.temp.name 			<- c(temp.x.m.temp.name,rep(NA, substraction.test))#
							names(temp.x.m.temp.name)[(length(temp.x.m.temp.name)-substraction.test+1):length(temp.x.m.temp.name)] 	<- 	NA#
						}#
						if(substraction.test < 0){#
							temp.x.m.temp.name 			<- rbind(time.groups.names,matrix(NA, (substraction.test),dim(time.groups.names)[2]))#
							names(temp.x.m.temp.name)[(length(temp.x.m.temp.name)-substraction.test+1):length(temp.x.m.temp.name)] 	<- 	NA#
						}#
						time.groups.names <- cbind(time.groups.names, temp.x.m.temp.name)					#
					}#
				}#
				colnames(time.groups.temp) <- names(temp.x.m)#
				rownames(time.groups.temp) <- NULL#
				time.groups.temp[is.na(time.groups.names)] <- NA#
				colnames(time.groups.sd) <- names(temp.x.m)#
				rownames(time.groups.sd) <- NULL#
				time.groups.sd[is.na(time.groups.names)] <- NA#
#
				colnames(time.groups.n) <- names(temp.x.m)#
				rownames(time.groups.n) <- NULL#
				time.groups.n[is.na(time.groups.names)] <- NA#
#
				colnames(time.groups.n) <- names(temp.x.m)#
				rownames(time.groups.names) <- NULL#
								temp.y 	<- (time.groups.temp)#
				temp.y <- apply(temp.y,2,as.numeric)#
				sd.po 	<- (time.groups.sd) #
				col.x2 <- as.vector((time.groups.names))#
				#hz.merge.control(colnames(x), col.x2)#
				#stop()#
				if(barpl&time.groups){#
					temp.y <- t(temp.y)#
					col.x2 <- t(time.groups.names)#
					sd.po <- t(sd.po)#
					color <- col.x2#
				for(col.grep in 1:length(colnames(tempmean))){#
					temp.col.grep <- grep(colnames(tempmean)[col.grep],color,fixed = T)#
					color[temp.col.grep] <- .col[col.grep]#
				}#
				}#
							plot.col <- color#
				#stop()#
		try(				inf.m.temp <- as.vector(time.groups.n)[!is.na(as.vector(time.groups.n))]#
		)#
		if(length(inf.m.temp)==0){inf.m.temp <- rep(0,dim(inf.m)[2])}#
				inf.m[i,] <- inf.m.temp			#
			}#
if(barpl&!time.groups){#
					col.x2 <- col.x#
				}#
col.temp <- hz.merge.control(hz.exp.des.parse.data2[,2],col.x2)#
plot.col <- hz.exp.des.parse.data2[col.temp,1]#
#
library(gplots)#
			try.error <- class(try(temp.min <- min(temp.y -sd.po,na.rm = T)*0.9))#
			if(try.error == "try-error"){#
			try.error <- class(try(temp.min <- 0))#
#
			}#
			  par(lwd = 2)#
yaxp.v <- c(0,max(as.numeric(tempmean[!is.infinite(tempmean)]),na.rm = TRUE), 4) #
yaxp.v[is.na(yaxp.v)] <- 1#
yaxp.v[is.infinite(yaxp.v)] <- 1#
#print(yaxp.v)#
				temp.max<- max(as.numeric(sd.po)+as.numeric(temp.y[!is.infinite(temp.y)]),na.rm = TRUE)#
				temp.min.off <- temp.min#
				if(temp.min < 0){#
					temp.max <- 0#
					temp.min.off <- 0#
				}#
				test <- barplot2(#
				temp.y-temp.min.off,#
				main = row.x[i],#
				col = plot.col,#
				names.arg = col.x2,#
				las = 2,#
				ylab = x.ylab,#
				plot.ci = TRUE,#
				ci.l = temp.y+sd.po,#
				ci.u = temp.y-sd.po,#
				ci.color = "black",#
				ci.lwd = 2,#
				lwd = 2,#
				beside = TRUE,#
				xpd=F, #
				yaxp=yaxp.v #
				,#
				ylim = c(temp.min, temp.max), #
				offset = temp.min.off,#
				mgp = c(3.9,1,0),#
				plot.grid = T,#
				grid.col = "darkgrey"#
			)#
			temp.x <- as.numeric(test)#
		}#
										 			#	stop()#
#
		if(length(.descr) != 0){#
		mtext(.descr[i],3,adj = 0)#
		}#
		if(is.matrix(inf.m)){#
			l.pos <- rep(3,length(temp.x))#
			l.pos[is.infinite(as.numeric(inf.m[i,])) & as.numeric(inf.m[i,] ) < 0 ] <- 1#
#
			if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.m[i,]}#
			if(exists("temp.min")){			text(temp.x,y = temp.min,labels=n.input,col = "white",pos = l.pos,cex = 0.8)#
}else{#
}#
		}#
		if(exists("inf.info")){#
			if(is.matrix(inf.info)){#
				l.pos <- rep(3,length(temp.x))#
				l.pos[is.infinite(as.numeric(inf.info[i,])) & as.numeric(inf.info[i,] ) < 0 ] <- 1#
				if(barpl&time.groups){n.input <- as.vector(t(time.groups.n))}else{n.input <- inf.info[i,]}#
				if(exists("temp.min")){		#
					text(temp.x,y = temp.min,labels=n.input,col = "black",pos = l.pos,cex = 1)#
				}else{#
				}#
			}#
		}#
		if(length(show.sd) != 0& barpl == FALSE){#
			if(length(show.sd) != 0 & unique(dim(x) == dim(show.sd)) == 1 & unique(dim(x) == dim(show.sd)) == TRUE){#
			#plotCI(temp.x,as.numeric(temp.y),ui =temp.y+sd.po,li = temp.y-sd.po,type = "n",add = TRUE,col = "darkgrey", gap = 0.3,lwd = 2.5)#
			if(!lineplot.beside){#
						plotCI(temp.x,as.numeric(temp.y),ui =as.numeric(temp.y)+as.numeric(sd.po),li =as.numeric(temp.y)-as.numeric(sd.po)#
						,type = "p",add = TRUE,col = plot.col, gap = 0,lwd = 3)#
			if(gui.input$time.grouped){#
					legend("topright", temp.legend.input[,1],fill = temp.legend.input[,2],border = "transparent", bg = "#FFFFFF99",cex = 0.8,xpd = T)#
			#stop()#
			}#
			}#
			}}#
		if(is.na(sub) == FALSE&!lineplot.beside) {#
			mtext(paste(substring(sub.x,0,125),"..."),adj = 0,cex = sub.cex)#
		}#
		if(is.null(ui)== FALSE){#
		}#
#
		if(is.na(h.abline[1]) == FALSE) {#
			abline(h= h.abline)#
		}#
		if(is.na(v.abline[1]) == FALSE) {#
			abline(v= v.abline)#
		}#
#
	if(graphic.type == "eps"){#
		graphics.off()	#
	}#
#	dev.off()#
#	stop("er")#
	}#
	graphics.off()#
	print(paste("Printed row.plot in ",getwd()))
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381ecde363")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381ecde363")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94385f0b8861")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94385f0b8861")
?text
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381eb6a85f")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94381eb6a85f")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438f06871")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438f06871")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94385b8041b8")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94385b8041b8")
source("/Users/henno/cracker/pkg/R/hz.row.plot.R")
error.try <- class(.error <- try(hz.script.bp(.data2,gui.input,.col,prog.max,ui,pb)))
pb.check	<- class(try(ui$setProgressBar(pb, 0, label=paste( "Starting additional Statistics. Idle..."))))
pb.check	<- class(try(ui$setProgressBar(pb, ratio.prog*1, label=paste( "data preparation..."))))
error.try <- class(.error<- try(hz.script.heatmap.return <- hz.script.heatmap(.data2,gui.input,prog.max,pb,ui,ratio.prog)))
str(.data2)
gui.input
if(!exists("ratio.prog")){ratio.prog <- 1000}#
library("pcaMethods")#
.data2$x[sapply(.data2$x, is.na)] <- NA#
pca.rows 	<- 	rownames(.data2$x)#
data 		<-	apply(.data2$x,2,as.numeric)#
#
data.sum 	<-	apply(data,1,function(x){sum(x,na.rm = TRUE)})#
# remove all rows, cols without entry#
data 		<- data[data.sum !=0,]#
pca.rows	<- pca.rows[data.sum !=0]#
if(!gui.input$n15.log2){#
data.log 	<- log2(data)}else{data.log <- data}#
data.log.inf <- hz.inf.replace(data.log,0.1)#
data.log <- data.log.inf$x#
data.log[data.log == "NaN"] 		<- NA#
#data.log			<- hz.norm(data.log,1,norm = "z")$x#
NA.vec 	<- which(apply(as.matrix(data.log),1,function(x){all(is.na(x))}))#
#
if(length(NA.vec) > 0){#
	cat("Matrix contains NA rows. Excluded:")#
	data.log <- data.log[-NA.vec,]#
	pca.rows <- pca.rows[-NA.vec]#
}#
#
rownames(data.log) <- pca.rows#
NA.vec <- which(apply(as.matrix(data.log),2,function(x){all(is.na(x))}))#
if(length(NA.vec) > 0){#
	cat("Matrix contains NA cols. Excluded:")#
	data.log <- data.log[,-NA.vec]#
}
if(dim(data.log)[2] > 1){#
#
	########## GUI #
	pb.check <- class(try(ui$setProgressBar(pb, ratio.prog*2, label=paste( "Heatmap calculation..."))))#
#
		while(pb.check == "try-error"){#
				print("Warning: User closed window!")#
				pb <- ui$progressBar(title = "cRacker", min = 0,max = prog.max, width = 300)#
				pb.check <- class(try(ui$setProgressBar(pb, ratio.prog*2, label=paste( "Heatmap calculation..."))))#
		}#
	###############
##
#
}
data.log
gui.input$n15.log2
!gui.input$n15.log2
data.log
if(!exists("ratio.prog")){ratio.prog <- 1000}#
#
	######## heatmap:#
	norm.m <- gui.input$norm.method#
	if(norm.m == "median"){norm.m <- "mean"}#
	hm.input 			<- apply(.data2$x,2,as.numeric)#
	rownames(hm.input)	<- rownames(.data2$x)#
	hm.input1			<- hz.norm(hm.input,1,norm ="z")$x#
#
	hm.input2			<- hz.norm(hm.input,1,norm ="mean")$x#
	if(!gui.input$n15.log2){#
		hm.input2 <- log2(hm.input2)#
	}#
	hm.input2[is.na(hm.input) != is.na(hm.input2)]<- 2#
	if(dim(hm.input)[2] >2){#
		hm.input.plot <- hz.norm(hm.input,norm = "z")$x#
		report.heatmap.norm <- "z-score"#
	}else{#
		hm.input.plot <- hz.norm(hm.input,norm = "median")$x#
		report.heatmap.norm <- "mean"#
	}
rownames(hm.input) 	<- rownames(.data2$x)#
	hm.input.plot 	= hm.input.plot[rowSums(!is.na(hm.input))!=0, colSums(!is.na(hm.input))!=0]#
#
	hm.input 		= hm.input[rowSums(!is.na(hm.input))!=0, colSums(!is.na(hm.input))!=0]#
	hm.input.NA  <- hm.input.plot #
#
	hm.input.NA.inf <- hz.inf.replace(hm.input.NA,0.1)#
	hm.input.NA 	<- hm.input.NA.inf$x#
	hm.input.NA[is.na(hm.input.NA)] <- min(hm.input.NA,na.rm = T)#
	sclus = hclust(dist(t(hm.input.NA)),method = "average")#
	test.nchar.rownames <- rownames(hm.input.NA)#
nchar.rownames 		<- nchar(test.nchar.rownames)#
test.nchar.rownames[nchar.rownames > 15] <- substring(test.nchar.rownames,1,15)#
test.nchar.rownames[nchar.rownames > 15] <- paste(test.nchar.rownames[nchar.rownames > 15] ,"...",sep = "")#
#rownames(hm.input.NA) <- test.nchar.rownames#
	gclus.sd <- apply(hm.input.NA,1, function(x){sd(x,na.rm = T)})#
	if(any(as.numeric(gclus.sd) == 0)){#
		print("dist")#
		gclus <- hclust(dist(hm.input.NA),method = "average")#
	}else{#
		print("cor")#
		gclus <- hclust(dist(hm.input.NA),method = "average")#
	}
error.try <- class(.error<- try(hz.script.hiercl.return <- hz.script.hiercl(sclus,gclus, p.aov,.col, plot.type= plot.type,gui.input = gui.input)))#
	#print(hz.script.hiercl.return)#
#
	if(error.try == "try-error"){#
				print(.error)#
#
		tkmessageBox(title="Message",message=paste("Error in hierarchical clustering!",.error),icon="warning",type="ok")#
	}
ls
ls()
grep("anova",ls())
ls()[c(43,71)]
hz.cracker.anova.return$p.aov
p.aov <- hz.cracker.anova.return$p.aov
gclus.sd <- apply(hm.input.NA,1, function(x){sd(x,na.rm = T)})#
	if(any(as.numeric(gclus.sd) == 0)){#
		print("dist")#
		gclus <- hclust(dist(hm.input.NA),method = "average")#
	}else{#
		print("cor")#
		gclus <- hclust(dist(hm.input.NA),method = "average")#
	}
error.try <- class(.error<- try(hz.script.hiercl.return <- hz.script.hiercl(sclus,gclus, p.aov,.col, plot.type= plot.type,gui.input = gui.input)))
if(error.try == "try-error"){#
				print(.error)#
#
		tkmessageBox(title="Message",message=paste("Error in hierarchical clustering!",.error),icon="warning",type="ok")#
	}
height.val = 2+0.02*dim(hm.input)[1]#
	width.val = 5 + dim(hm.input)[2]*0.8#
	if(height.val < 8){ #
		height.val = 8#
	}#
	if(width.val < 8){ #
		width.val = 8#
	}#
#
	mar.row = max(nchar(rownames(hm.input)))#
	mar.col = max(nchar(colnames(hm.input)))#
#
	heatmap.max <- max(nchar(colnames(hm.input)))#
#
if(heatmap.max > 5){#
	heatmap.max <- (heatmap.max-5)*0.53+5#
	}
if(colorblind.set){#
				jet.colors		<- colorRampPalette(c(#
					unlist(color.blind)[c(7,6,4)],#
					unlist(color.blind)[c(2,3)]#
					))#
			}else{#
				jet.colors <- colorRampPalette(c("#000039","#00007F", "#007FFF",colors()[639],colors()[638],colors()[635],"green", "yellow","red"))#
		}
try(if(!gui.input$color.plot){#
	jet.colors <- colorRampPalette(c("black",colors()[276],colors()[338],"white"))#
})
library("grDevices")#
	try(dendro.gclus <- as.dendrogram(gclus))#
	try(dendro.gclus <- dendrapply(dendro.gclus, function(x){hz.change.nodePar(x,gclus,hz.script.hiercl.return$col.aov,hz.script.hiercl.return$temp.lwd, hz.script.hiercl.return$col.aov)}))
if(!exists("dendro.gclus")){dendro.gclus <- gclus}
Colv.input <- as.dendrogram(sclus)#
#
standard.heatmap <- TRUE
gui.input$time.grouped& exists("exp.design")
hm.input.plot
hm.input
dim(hm.input)[2] >2
is.na(hm.input)
aggregate(is.na(hm.input),list(is.na(hm.input)),legnth)
aggregate(is.na(hm.input),list(is.na(hm.input)),length)
naVecNew <- as.vector(is.na(hm.input.plot))
naVecNew
naVec <- as.vector(is.na(hm.input))
naVec
naVec == naVecNew
dim(hm.input)[2] >2|1==0
dim(hm.input)[2] >2&1==0
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
error.try <- class(.error<- try(hz.script.heatmap.return <- hz.script.heatmap(.data2,gui.input,prog.max,pb,ui,ratio.prog)))
getwd()
ui <- cracker.ui.tk;	# Use TclTk for ui#
ui$init();				# Init (loads library)#
prog.max <- 10000#
pb <- ui$progressBar(title = "cRacker", min = 0,max = prog.max, width = 300)
error.try <- class(.error<- try(hz.script.heatmap.return <- hz.script.heatmap(.data2,gui.input,prog.max,pb,ui,ratio.prog)))
getwd()
error.try <- class(.error<- try(hz.script.heatmap.return <- hz.script.heatmap(.data2,gui.input,prog.max,pb,ui,ratio.prog)))
error.try <- class(.error<- try(hz.script.heatmap.return <- hz.script.heatmap(.data2,gui.input,prog.max,pb,ui,ratio.prog)))
f
error.try <- class(.error<- try(hz.script.heatmap2.return <- hz.script.heatmap2(.data2,gui.input,hz.cracker.anova.return$p.aov, hz.exp.des.parse.data2,.col,colorblind.set,prog.max,pb,ui, plot.type= plot.type,color.blind= color.blind, ratio.prog = ratio.prog)))
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943846503b7e")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943846503b7e")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943884979c4")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943884979c4")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438fd9371c")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file9438fd9371c")
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94387db11764")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file94387db11764")
hm.input
x <- hm.input
if(is.vector(x)	== TRUE){										col		<- names(x)#
							x 		<- t(as.matrix(as.numeric(x)))#
							row		<- "t"}else{#
			if(dim(x)[1]==1){	row <- rownames(x);#
								col <- colnames(x);#
								x	<- t(as.matrix(as.vector(x)))}else{	#
	row <- rownames(x)#
	col <- colnames(x)#
	#==============#
	# As.numeric, NA substitution#
	x <- as.matrix(x)#
	x <- apply(x,2,as.numeric)#
	x[sapply(x, is.na)] <- na.sub}}#
	x[is.infinite(x)] <- NA
x
x.mean 	<- apply(x,margin,function(a){mean(a,na.rm = TRUE)})
margin = 1
x.mean 	<- apply(x,margin,function(a){mean(a,na.rm = TRUE)})
x.sd 			<- apply(x,margin,function(a){sd(a,na.rm = TRUE)})
x.mean
x.sd
x.sd[is.na(x.sd)]			<- 0
x <- t(t(x-x.mean)/x.sd)
x
x[122,]
x[121,]
hm.input[121,]
hm.input[123,]
hm.input[120,]
heatmap(hm.input)
hm.input
hm.input
gui.input$N15
gui.input$n15.log2
source("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943857808d5e")#
unlink("/var/folders/f7/z2msn08c8xl18k008k8ypkp00000gn/T//RtmpvhH5ql/file943857808d5e")
hm.input
range(hm.input)
range(hm.input,na.rm = T)
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
source("/Users/henno/cracker/pkg/R/hz.norm.R")
source("/Users/henno/cracker/pkg/R/hz.script.row.plot.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/cracker/pkg/R/hz.matrix.creator.R")
source("/Users/henno/cracker/pkg/R/hz.matrix.creator.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap2.R")
source("/Users/henno/cracker/pkg/R/hz.script.heatmap.R")
source("/Users/henno/documents/Skripte/R-Functions/R-programs/start-console Kopie.R")
